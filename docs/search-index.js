var searchIndex = JSON.parse('{\
"qrcode53bytes":{"doc":"qrcode53bytesQR code for 53 bytes repo; version: 1.1.1…","i":[[0,"builder","qrcode53bytes","QR code builder.",null,null],[3,"QrBuilder","qrcode53bytes::builder","Builder for a QR code.",null,null],[12,"version","","Version to use. If not set a minimal version will be…",0,null],[12,"mask","","Mask to use. If not set the optimal mask will be chosen…",0,null],[12,"ecl","","Error correction level to use. If not set ECLevel::Q,…",0,null],[12,"mode","","Encoding mode to use. If not set will be inferred from…",0,null],[12,"matrix","","Resulting matrix.",0,null],[3,"ZigZagIt","","",null,null],[12,"size","","",1,null],[12,"horizontal_next","","",1,null],[12,"upwards","","",1,null],[12,"x","","",1,null],[12,"y","","",1,null],[12,"valid","","",1,null],[4,"Error","","",null,null],[13,"UnsupportedMode","","Mode doesn\'t support encoding the supplied message.",2,null],[13,"MessageTooLong","","Message is too long for the supplied version, or larger…",2,null],[13,"IncompleteBuilder","","The builder was in an incomplete state when trying to…",2,null],[11,"new","","Create a new builder.",0,[[],["qrbuilder",3]]],[11,"version","","Set version. If not set the smallest applicable version…",0,[[["version",3]]]],[11,"mask","","Set mask to use. If not set the best mask will be chosen…",0,[[["mask",3]]]],[11,"ecl","","Set error correction. Will default to ECLevel::Q.",0,[[["eclevel",4]]]],[11,"mode","","Set the mode to use, will otherwise be calculated from…",0,[[["mode",4]]]],[11,"into","","Build all elements and generate a QR code.",0,[[],[["result",4],["qr",3],["error",4]]]],[11,"into_qr","","Convert the builder into a QR code.",0,[[],[["result",4],["qr",3],["error",4]]]],[11,"add_all","","Add all elements of a QR code.",0,[[],[["result",4],["error",4]]]],[11,"add_fun_patterns","","Add function patterns.",0,[[]]],[11,"add_data","","Add data.",0,[[],[["result",4],["error",4]]]],[11,"add_raw_data","","Add raw data.",0,[[["bitvec",3]]]],[11,"mask_data","","Mask data.",0,[[]]],[11,"mask_best","","Mask by evaluating available masks and choose the best one.",0,[[]]],[11,"mask_with","","Mask using a specific mask.",0,[[["mask",3]]]],[11,"add_info","","Add info.",0,[[]]],[11,"add_format_info","","Add format info.",0,[[]]],[11,"complete","","Return true if the build is complete.",0,[[]]],[11,"ensure_settings","","",0,[[],[["result",4],["error",4]]]],[11,"add_finders","","",0,[[]]],[11,"add_finder","","",0,[[]]],[11,"add_separator","","",0,[[]]],[11,"add_alignments","","",0,[[]]],[11,"try_add_alignment","","",0,[[]]],[11,"add_timing_patterns","","",0,[[]]],[11,"set_timing","","",0,[[]]],[11,"add_dark_module","","",0,[[]]],[11,"add_reserved_areas","","",0,[[]]],[11,"reserve_rect","","",0,[[]]],[11,"add_format","","",0,[[["bitvec",3]]]],[11,"to_dbg_string","","Convert to debug string.",0,[[],["string",3]]],[11,"new","","",1,[[]]],[11,"advance","","",1,[[]]],[11,"move_horizontally","","",1,[[]]],[11,"move_vertically","","",1,[[]]],[0,"data","qrcode53bytes","Data encoding.",null,null],[5,"encode","qrcode53bytes::data","Encode string data to BitVec<Lsb0 , u8>. Does not include…",null,[[["version",3]]]],[5,"encode_with_mode","","Encode string data to BitVec<Lsb0 , u8> in a specific…",null,[[["mode",4],["version",3]],[["lsb0",3],["bitvec",3]]]],[5,"append","","Append data to bitvec of a certain len.",null,[[["bitvec",3]]]],[5,"bitvec_char_count","","",null,[[["mode",4],["version",3]],[["lsb0",3],["bitvec",3]]]],[5,"bitvec_data","","",null,[[["mode",4]],[["lsb0",3],["bitvec",3]]]],[5,"encode_byte_data","","",null,[[["vec",3]],[["lsb0",3],["bitvec",3]]]],[5,"string_to_bytes","","",null,[[["mode",4]],["vec",3]]],[0,"ec","qrcode53bytes","Error correction calculations.",null,null],[4,"ECLevel","qrcode53bytes::ec","Error correction level.",null,null],[13,"L","","Recovers 7% of data",3,null],[5,"add","","Add error correction codewords to data.",null,[[["bitvec",3],["version",3],["lsb0",3]],[["lsb0",3],["bitvec",3]]]],[5,"generate_ec_codewords","","",null,[[],["vec",3]]],[5,"group_into_blocks","","",null,[[["vec",3],["bitvec",3]],[["vec",3],["vec",3]]]],[7,"REMAINDER_BITS","","",null,null],[7,"EXP","","",null,null],[7,"LOG","","",null,null],[11,"to_bitvec","","Returns the bit encoding. It is not the same as the enum…",3,[[],[["lsb0",3],["bitvec",3]]]],[0,"info","qrcode53bytes","Contains various QR specific encoding info.",null,null],[5,"total_codewords","qrcode53bytes::info","Returns the total codewords for a given version end error…",null,[[]]],[5,"total_bits","","Returns the total data bits possible for a given version…",null,[[]]],[5,"group_block_count","","Returns a vector of codewords counts per block. The length…",null,[[],["vec",3]]],[5,"block_ec_count","","Returns error correction codewords per block.",null,[[]]],[5,"format_info","","Returns the format BitVec representation to be embedded.",null,[[["mask",3]],[["lsb0",3],["bitvec",3]]]],[5,"block_data","","",null,[[]]],[7,"FORMAT_INFO","","",null,null],[0,"mask","qrcode53bytes","Masking flips data modules with certain patterns.",null,null],[3,"Mask","qrcode53bytes::mask","A mask, must be inside [0, 7] inclusive.",null,null],[12,"0","","",4,null],[3,"DLP1","","",null,null],[12,"__private_field","","",5,null],[3,"DLP2","","",null,null],[12,"__private_field","","",6,null],[5,"mask","","Evaluates masks. Returns the mask with the lowest score…",null,[[["matrix",3]]]],[5,"apply_mask","","Apply a mask of a specific type to a matrix.",null,[[["mask",3],["matrix",3]],["matrix",3]]],[5,"evaluate","","Evaluate the mask score of a matrix.",null,[[["matrix",3]]]],[5,"evaluate_5_in_line","","",null,[[["matrix",3]]]],[5,"eval_5_row","","",null,[[["matrix",3]]]],[5,"eval_5_col","","",null,[[["matrix",3]]]],[5,"diff_5","","",null,[[]]],[5,"evaluate_2x2","","",null,[[["matrix",3]]]],[5,"evaluate_dl_pattern","","",null,[[["matrix",3]]]],[5,"count_dl_row","","",null,[[["matrix",3]]]],[5,"count_dl_col","","",null,[[["matrix",3]]]],[5,"count_dl_patterns","","",null,[[["bitvec",3]]]],[5,"evaluate_bw","","",null,[[["matrix",3]]]],[5,"apply_mask_fun","","",null,[[["fn",8],["box",3],["matrix",3]],["matrix",3]]],[11,"new","","Create a new mask. Fails if larger than 7.",4,[[],["mask",3]]],[11,"fun","","",4,[[],[["fn",8],["box",3]]]],[0,"matrix","qrcode53bytes","The matrix holds all modules in a QR code.",null,null],[3,"Matrix","qrcode53bytes::matrix","Matrix is a 2-dimensional grid holding the QR modules.",null,null],[12,"size","","Size defines the width and height of the matrix.",7,null],[12,"modules","","The modules.",7,null],[4,"Module","","The type of a module. Differentiates the different types…",null,null],[13,"Unknown","","An unknown module, it hasn\'t been assigned yet.",8,null],[13,"Reserved","","Reserved module. Version and format info uses this to…",8,null],[13,"Function","","Function module, contains QR code artifacts like finders…",8,null],[13,"Data","","Data module. Contains both data and error codes.",8,null],[11,"is_dark","","Is the module dark? Only makes sense for data or function…",8,[[]]],[11,"is_fun","","Is the module a function module? This includes reserved…",8,[[]]],[11,"is_data","","Is the module a Data module?",8,[[]]],[11,"new","","Create a new matrix, modules initialized to Unknown.",7,[[],["matrix",3]]],[11,"index","","Map (x,y) coords to linear index.",7,[[]]],[11,"get","","Get module.",7,[[],["module",4]]],[11,"get_mut","","Get mutable module.",7,[[],["module",4]]],[11,"is_dark","","Returns true if the module at x,y is dark.",7,[[]]],[11,"is_fun","","Return true if the module at x,y is a function module.",7,[[]]],[11,"is_data","","Return true if the module at x,y contains data.",7,[[]]],[11,"set","","Assign a module.",7,[[["module",4]]]],[11,"set_fun","","Assign a function module. Fails if the existing module is…",7,[[]]],[11,"set_data","","Assign a data module. Fails unless the existing module is…",7,[[]]],[11,"flip","","Flip a module. Fails unless it\'s a data module.",7,[[]]],[11,"set_square_outline","","Set square outline.",7,[[["module",4]]]],[11,"set_square","","Set square.",7,[[["module",4]]]],[11,"set_rect","","Set rect.",7,[[["module",4]]]],[11,"any_in_square","","Return true if there\'s any module other than Unknown in…",7,[[]]],[11,"any_in_rect","","Return true if there\'s any module other than Unknown in…",7,[[]]],[11,"complete","","Return true if the matrix is complete, that\'s if it only…",7,[[]]],[0,"mode","qrcode53bytes","Encoding modes for a QR code.",null,null],[4,"Mode","qrcode53bytes::mode","Encoding modes.",null,null],[13,"Byte","","Byte mode supports the ISO-8859-1 character set.",9,null],[11,"from_str","","Create Mode from string, decide from content.",9,[[],["mode",4]]],[11,"matches","","Is this a valid mode for a string?",9,[[]]],[11,"to_bitvec","","BitVec<Lsb0 , u8> representation.",9,[[],[["lsb0",3],["bitvec",3]]]],[11,"in_byte","","Returns true if contents can be represented by the byte…",9,[[]]],[0,"qr","qrcode53bytes","Provides a simple and safe API.",null,null],[3,"Qr","qrcode53bytes::qr","The QR code.",null,null],[12,"version","","Version of the QR code.",10,null],[12,"ecl","","Error correction level.",10,null],[12,"mode","","Encoding mode.",10,null],[12,"matrix","","The modules.",10,null],[12,"mask","","The applied mask, 0 to 7.",10,null],[11,"new","","Create a new QR from a string.",10,[[],[["result",4],["qr",3],["error",4]]]],[11,"size","","Returns the size of the QR code.",10,[[]]],[0,"rendercommons","qrcode53bytes","Renders the QR code to different outputs.",null,null],[3,"Color","qrcode53bytes::rendercommons","An RGB color implementation.",null,null],[12,"r","","",11,null],[12,"g","","",11,null],[12,"b","","",11,null],[3,"ParseColorError","","An error from trying to parse a Color instance from string.",null,null],[5,"to_dbg_string","","Convert to string, with chars for the different underlying…",null,[[["matrix",3]],["string",3]]],[11,"new","","Create a new from rgb parts.",11,[[]]],[11,"hex","","Create a new color from a hex input.",11,[[]]],[11,"from_4_hex","","Create a new color from a length 4 input hex.",11,[[],[["result",4],["parsecolorerror",3]]]],[11,"from_7_hex","","Create a new color from a length 7 input hex.",11,[[],[["result",4],["parsecolorerror",3]]]],[11,"to_hex_str","","Convert to a hex string.",11,[[],["string",3]]],[0,"rendersvg","qrcode53bytes","Renders the QR code to different outputs.",null,null],[3,"SvgRenderer","qrcode53bytes::rendersvg","A string renderer for converting a QR code into svg.",null,null],[12,"light","","",12,null],[12,"dark","","",12,null],[12,"w","","",12,null],[12,"h","","",12,null],[12,"qz","","",12,null],[11,"new","","Create a new renderer.",12,[[]]],[11,"light_module","","Set the light module color. Will also be the color of the…",12,[[["color",3]]]],[11,"dark_module","","Set the dark module color.",12,[[["color",3]]]],[11,"quiet_zone","","Set if quiet zone should be produced.",12,[[]]],[11,"dimensions","","Set the dimensions of the output, in pixels. Includes the…",12,[[]]],[11,"render","","Render QR.",12,[[["qr",3]],["string",3]]],[11,"render_matrix","","Render matrix.",12,[[["matrix",3]],["string",3]]],[0,"renderstring","qrcode53bytes","Renders the QR code to different outputs.",null,null],[3,"StringRenderer","qrcode53bytes::renderstring","A string renderer for converting a QR code into a…",null,null],[12,"light","","",13,null],[12,"dark","","",13,null],[12,"module_w","","",13,null],[12,"module_h","","",13,null],[12,"qz","","",13,null],[11,"new","","Create a new renderer.",13,[[]]],[11,"light_module","","Set the light module character.",13,[[]]],[11,"dark_module","","Set the dark module character.",13,[[]]],[11,"quiet_zone","","Set if quiet zone should be produced.",13,[[]]],[11,"module_dimensions","","Set the module dimensions, in character count per module.",13,[[]]],[11,"render","","Render QR to string.",13,[[["qr",3]],["string",3]]],[11,"render_matrix","","Render matrix to string.",13,[[["matrix",3]],["string",3]]],[11,"qz_lines","","",13,[[["string",3]]]],[11,"qz_chars","","",13,[[["string",3]]]],[0,"renderfordodrio","qrcode53bytes","Renders the QR code to different outputs.",null,null],[3,"SvgDodrioRenderer","qrcode53bytes::renderfordodrio","A string renderer for converting a QR code into svg.",null,null],[12,"w","","",14,null],[12,"h","","",14,null],[12,"qz","","",14,null],[11,"new","","Create a new renderer.",14,[[]]],[11,"render","","Render QR.",14,[[["qr",3]],["string",3]]],[11,"render_matrix","","Render matrix.",14,[[["matrix",3]],["string",3]]],[0,"version","qrcode53bytes","Specifies the version of a QR code.",null,null],[3,"Version","qrcode53bytes::version","QR code version, defines the size",null,null],[12,"0","","",15,null],[11,"new","","Create a new version, must be in the [1..40] range.",15,[[],["version",3]]],[11,"capacity","","Return the data capacity.",15,[[]]],[11,"size","","Return the size of the QR code.",15,[[]]],[11,"char_count_len","","Returns the required len of the char count bit…",15,[[["mode",4]]]],[11,"extra_version_areas","","Returns true if this version requires extra version areas.",15,[[]]],[11,"dark_module_pos","","Returns the position of the dark module.",15,[[]]],[11,"index","","Return the version value - 1, suitable for indexing.",15,[[]]],[11,"from","qrcode53bytes::builder","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","qrcode53bytes::ec","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","qrcode53bytes::mask","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","qrcode53bytes::matrix","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","qrcode53bytes::mode","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","qrcode53bytes::qr","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","qrcode53bytes::rendercommons","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","qrcode53bytes::rendersvg","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","qrcode53bytes::renderstring","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","qrcode53bytes::renderfordodrio","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","qrcode53bytes::version","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","qrcode53bytes::rendercommons","",16,[[["parseinterror",3]]]],[11,"next","qrcode53bytes::builder","",1,[[],["option",4]]],[11,"clone","","",2,[[],["error",4]]],[11,"clone","qrcode53bytes::ec","",3,[[],["eclevel",4]]],[11,"clone","qrcode53bytes::mask","",4,[[],["mask",3]]],[11,"clone","qrcode53bytes::matrix","",8,[[],["module",4]]],[11,"clone","","",7,[[],["matrix",3]]],[11,"clone","qrcode53bytes::mode","",9,[[],["mode",4]]],[11,"clone","qrcode53bytes::rendercommons","",11,[[],["color",3]]],[11,"clone","","",16,[[],["parsecolorerror",3]]],[11,"clone","qrcode53bytes::version","",15,[[],["version",3]]],[11,"eq","qrcode53bytes::builder","",2,[[["error",4]]]],[11,"eq","qrcode53bytes::ec","",3,[[["eclevel",4]]]],[11,"eq","qrcode53bytes::mask","",4,[[["mask",3]]]],[11,"ne","","",4,[[["mask",3]]]],[11,"eq","qrcode53bytes::matrix","",8,[[["module",4]]]],[11,"ne","","",8,[[["module",4]]]],[11,"eq","","",7,[[["matrix",3]]]],[11,"ne","","",7,[[["matrix",3]]]],[11,"eq","qrcode53bytes::mode","",9,[[["mode",4]]]],[11,"eq","qrcode53bytes::qr","",10,[[["qr",3]]]],[11,"ne","","",10,[[["qr",3]]]],[11,"eq","qrcode53bytes::rendercommons","",11,[[["color",3]]]],[11,"ne","","",11,[[["color",3]]]],[11,"eq","qrcode53bytes::version","",15,[[["version",3]]]],[11,"ne","","",15,[[["version",3]]]],[11,"deref","qrcode53bytes::mask","",5,[[],["vec",3]]],[11,"deref","","",6,[[],["vec",3]]],[11,"fmt","qrcode53bytes::builder","",2,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::ec","",3,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::mask","",4,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::matrix","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::mode","",9,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::qr","",10,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::rendercommons","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","qrcode53bytes::version","",15,[[["formatter",3]],["result",6]]],[11,"not","qrcode53bytes::matrix","",8,[[],["module",4]]],[11,"from_str","qrcode53bytes::rendercommons","",11,[[],["result",4]]],[11,"initialize","qrcode53bytes::mask","",5,[[]]],[11,"initialize","","",6,[[]]]],"p":[[3,"QrBuilder"],[3,"ZigZagIt"],[4,"Error"],[4,"ECLevel"],[3,"Mask"],[3,"DLP1"],[3,"DLP2"],[3,"Matrix"],[4,"Module"],[4,"Mode"],[3,"Qr"],[3,"Color"],[3,"SvgRenderer"],[3,"StringRenderer"],[3,"SvgDodrioRenderer"],[3,"Version"],[3,"ParseColorError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);